{% extends 'base.html.twig' %}

{% block title %}Test Upload Image API{% endblock %}

{% block body %}
    <h1>Test Upload Image API</h1>
    <form onsubmit="uploadImage(event)">
        <label for="imageInput">Select an image:</label>
        <input type="file" id="imageInput" accept="image/*" required>

        <label for="labelInput">Enter labels (one per line):</label>
        <textarea id="labelInput" rows="6" required></textarea>

        <button type="submit" id="uploadButton">Upload</button>
    </form>
    <div id="result" style="margin-top: 20px;"></div>

    <script>
        async function uploadImage(event) {
            event.preventDefault();

            const fileInput = document.getElementById('imageInput');
            const labelInput = document.getElementById('labelInput');
            const uploadButton = document.getElementById('uploadButton');
            const resultDiv = document.getElementById('result');

            const file = fileInput.files[0];
            const label = labelInput.value;

            if (!file || !label) {
                alert('Please select a file and enter labels.');
                return;
            }

            //Show loading indicator
            uploadButton.disabled = true;
            resultDiv.innerHTML = '<p>Uploading... Please wait.</p>';

            const reader = new FileReader();

            reader.onload = async function () {
                const base64Image = reader.result;

                const payload = JSON.stringify({
                    image: base64Image,
                    label: label
                });

                try {
                    const response = await fetch('/api/upload-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzU2NTc1NzMsImV4cCI6MTczNTkxNjc3Mywicm9sZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJ1c2VybmFtZSI6ImFkbWluQGFkbWluLmFkbWluIn0.AEhF834cFaexcgbbQQ9c8q6KZJt80PAYEs-j-mSggNRQw1wRnu0q3H2mPmmzNqls3Vzf0fdcqZGqC1N2BR8tkkJpZXz2acPZmCfWM7QzpXoN8mRDnhnv5EsM5ntEAnsSZWeULfcpx9D0ufKILM4dTUs8j4zBhdMxzspPgVRI9B1lsuuNlR0ZF9KB4saJHUElc1y6EvNA5GNurI4nrpYTYgz_Bt2UMYq5_ccwK8rSkDWO67dw25e_RCgysogt3ESTbTHvEG6xjPjnMihkPTsbAA2d4OjlJqEAEq5dcEjAfOGsN60ORJi1KFgmp3M5UOqFLx8B72XS-R8zycsXGRhx_A' //Replace TOKEN dynamically as needed
                        },
                        body: payload
                    });

                    const result = await response.json();

                    if (response.ok) {
                        resultDiv.innerHTML = `
                            <p><strong>Message:</strong> ${result.message}</p>
                            <p><strong>Image Path:</strong> <a href="${result.image_path}" target="_blank">${result.image_path}</a></p>
                            <p><strong>Label Path:</strong> <a href="${result.label_path}" target="_blank">${result.label_path}</a></p>
                        `;
                        //Reset the form
                        fileInput.value = '';
                        labelInput.value = '';
                    } else {
                        resultDiv.innerHTML = `
                            <p><strong>Error:</strong> ${result.error}</p>
                        `;
                    }
                } catch (error) {
                    resultDiv.innerHTML = '<p>An unexpected error occurred.</p>';
                } finally {
                    uploadButton.disabled = false;
                }
            };

            reader.readAsDataURL(file);
        }
    </script>
{% endblock %}
